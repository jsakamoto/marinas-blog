@using PersonalSite.Models

@foreach (var group in Groups)
{
    var (company, experiences) = group;

    if (experiences.Count() == 1)
    {
        var experience = experiences.First();

        <div class="d-flex" style="page-break-inside: avoid;">
    <div class="col-logo">
        <Logo Src="@experience.CompanyLogo" Alt="@($"{experience.Company} logo")" Class="me-4"
            Href="@experience.Link" />
    </div>

    <div class="flex-grow-1">
        <div class="mb-4">
            <h2>@experience.Title</h2>

            <ExperienceView Model="@((experience: experience, isSub: false))" />
        </div>
    </div>
</div>
    }
    else
    {
        var lastExperience = experiences.First();
        var firstExperience = experiences.Last();

        <div class="d-flex" style="page-break-inside: avoid;">
    <div class="col-logo">
        <Logo Src="@firstExperience.CompanyLogo" Alt="@($"{firstExperience.Company} logo")" Class="me-4"
            Href="@firstExperience.Link" />
    </div>

    <div class="flex-grow-1">
        <h2>@firstExperience.Company</h2>

        <p class="text-muted meta mb-5">
            @firstExperience.GetStartDate().Humanize2(lastExperience.GetEndDate())</p>

        <ol class="timeline mt-5">
            @foreach (var experience in experiences
                   .OrderByDescending(x => x.StartDate)
                   .ThenByDescending(x => x.EndDate))
                    {
                        <li>
                            <div class="mb-5 pt-1">
                                <h3>@experience.Title</h3>

                                <ExperienceView Model="@((experience: experience, isSub: true))" />
                            </div>
                        </li>
                    }
                </ol>
            </div>
        </div>
    }

    @if (Groups.LastOrDefault() != group)
    {
        <hr />
    }
}

@code {
    [Parameter]
    [EditorRequired]
    public IEnumerable<IGrouping<string, Experience>> Groups { get; set; } = null!;
}