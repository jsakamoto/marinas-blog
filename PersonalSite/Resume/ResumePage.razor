@page "/resume"
@layout PageLayout
@using System.Linq
@using System.IO
@using System.Text.Json
@using PersonalSite.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<style>
    .grid-dl dt {
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        padding: 0.5em 0 0.5em 0;
        font-weight: 600;
    }

    .grid-dl dd {
        margin: 0;
        padding: 0.5em 0 0.5em 0;
    }

    @@media (min-width: 550px) {
        .grid-dl {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto;
        }

        .grid-dl dt {
            grid-column-start: 1;
        }

        .grid-dl dd {
            grid-column-start: 2;
        }

        .grid-dl dt+dd {
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }
    }

    .sidenav {
        font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
    }

    .mystyle {
        font-weight: bold;
    }

    .mystyle:before {
        content: "";
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 5px;
        margin-bottom: 5px;
        display: inline-block;
        background-color: #007bff;
        ;
        vertical-align: middle;
    }
</style>

<PageTitle>Resume - Marina Sundstr√∂m</PageTitle>

<div class="row">
    <div class="sections col-xxl-10">

        <h1 class="post-title">Resume</h1>
        <div class="post-line"></div>

        <section class="text-content pt-1 pe-4 mb-5">

            <h2 id="objective" class="">Objective</h2>

            <div class="row">

                <div class="pe-4">

                    <p>I am a Software Developer with interest in Software design and the Development process.
                    </p>

                    <p>To me, developing software is not just about programming, but understanding both the
                        domain and
                        the people we
                        are developing for, and their experience.</p>

                    <p>I have @(DateTime.Now.Year - 2014) years of professional experience in Software development - Desktop and Web
                        (Frontend &
                        Backend). I
                        am good at C#/.NET. I have been building apps with WPF and ASP.NET Core & Blazor.</p>

                    <p>Other languages that I know well are JavaScript/Typescript. I have been writing React
                        apps
                        professionally. I
                        also have basic database skills.</p>

                    <p>I am structured and Solution-oriented. I thrive in a creative environment, in which you
                        can be
                        yourself,
                        where you can freely express your individuality. That is where we can grow together.</p>

                </div>

            </div>

        </section>

        <section>
            <h1 id="experience" class="pb-2">Experience</h1>

            @if (resume is null)
            {
                <text>Loading experiences...</text>
            }
            else
            {
                var groups = resume.Experience
                   .OrderByDescending(x => x.Highlight)
                   .ThenByDescending(x => Default(x.EndDate))
                   .GroupBy(e => e.Company);

                <div class="mt-4 mb-5" style="max-width: 820px">
                    <ExperienceList Groups="@groups.Take(5)" />

                    @if(ShowMore) 
                    {
                            <ExperienceList Groups="@groups.Skip(5)" />

                            <div class="d-flex justify-content-center">
                                <button class="btn btn-lg btn-outline-secondary mt-4" href="#" @onclick="ToggleShowMore">Show less</button>
                            </div>
                    }
                    else 
                    {
                        <div class="d-flex justify-content-center">
                            <button class="btn btn-lg btn-outline-secondary mt-4" href="#" @onclick="ToggleShowMore">Show @groups.Skip(5).Count() more</button>
                        </div>
                    }
                </div>

            }

        </section>

        <section class="mt-4 mb-4">

            @if (resume is null)
            {
                <text>Loading education...</text>
            }
            else
            {
                <h1 id="education" class="pb-2">Education</h1>

                @foreach (var education in resume.Education)
                {
                    <div class="d-flex">
                         <div class="col-logo">
                            <Logo Src="@education.Logo" Alt="@($"{education.School} logo")" Class="m-4 mt-2" Href="@education.Link" />
                        </div>
                        <div class="flex-grow-1">
                            <EducationView Model="education" />
                        </div>
                    </div>

                    @if(resume.Education.LastOrDefault() != education) 
                    {
                        <hr />
                    }
                }
            }

        </section>

        <section class="mt-4 mb-4" style="page-break-inside: avoid;">

            <h1 id="skills" class="pb-2">Skills</h1>

            @if (skillAreas is null)
            {
                <text>Loading skills...</text>
            }
            else
            {
                            
                <div class="mb-5">
                    <small class="text-muted">Click on a skill to learn more.</small>
                </div>

                <dl class="grid-dl">

                    @foreach (var (skillArea, skills) in skillAreas)
                    {
                        <dt>@skillArea</dt>
                        <dd>
                            @foreach (var (skillName, skillInfo) in skills)
                            {
                                var comment = (skillInfo.Comment is not null ? $"<div class=\"mt-2\"><b>Comment:</b><p> {skillInfo.Comment}</p></div>" : string.Empty);
                                    
                                var link = (skillInfo.Link is not null ? $"<div class=\"mt-2\"><small><a href=\"{skillInfo.Link.Href}\" target=\"_blank\">{skillInfo.Link.Title}</a></small></div>" : string.Empty);

                                    var content = $@"<div>
                                        <div><b>Skill level:</b> {SkillLevelToString(skillInfo.Level)}</div>
                                        {comment}
                                        {link}
                                    </div>";

                                <a tabindex="0" class="badge rounded-pill bg-secondary me-1 mb-1 text-decoration-none" role="button" data-bs-toggle="popover" data-bs-trigger="focus" title="@skillName" data-bs-content="@content" data-bs-html="true">
                                    @skillName
                                </a>
                            }
                </dd>
                    }

                </dl>
            }

        </section>

    </div>

   @*
    <div class="col-md-2 right-border">
        <section class="sidenav" style="position: -webkit-sticky; position: sticky; top: 80px;">
            <h4 class="mb-4">Sections</h4>

            <ul style="margin: 0; padding: 0; list-style: none" class="mb-4">
                <li>
                    <a href="/resume#objective">Objective</a>
                </li>
                <li>
                    <a href="/resume#experience">Experience</a>
                </li>
                <li>
                    <a href="/resume#education">Education</a>
                </li>
                <li>
                    <a href="/resume#skills">Skills</a>
                </li>
            </ul>
        </section>
    </div>
    *@ 
</div>

@code {
    Resume? resume;
    IDictionary<string, Dictionary<string, SkillInfo>>? skillAreas;

    protected override async Task OnInitializedAsync()
    {
        var json = await Http.GetStringAsync("/pages/resume.json");
        resume = Resume.FromJson(json);

        json = await Http.GetStringAsync("/pages/skills.json");
        skillAreas = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, SkillInfo>>>(json)!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("blazorHelpers.enablePopovers");
    }

    [Parameter]
    public bool ShowMore { get; set; }

    void ToggleShowMore() 
    {
        ShowMore = !ShowMore;
    }

    class SkillInfo 
    {
        public int Level { get; set; }

        public string? Comment { get; set; }

        public LinkInfo? Link { get; set; }
    }

    class LinkInfo 
    {
        public string Title { get; set; }

        public string Href { get; set; }
    }

    string SkillLevelToString(int skillLevel)
    {
        return skillLevel switch {
            1 => "Novice",
            2 => "Advanced Beginner",
            3 => "Competent",
            4 => "Proficient",
            5 => "Expert",
            _ => "Invalid"
        };
    }

    DateTime Default(DateTime? dt) 
    {
        if(dt == null) 
        {
            return DateTime.Now.AddDays(365);
        }
        return dt.GetValueOrDefault();
    }
}