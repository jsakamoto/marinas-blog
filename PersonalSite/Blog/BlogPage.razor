@page "/blog"
@layout PageLayout
@using PersonalSite.Markdown
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-9">
        <div class="mb-5">
            <h1 class="post-title">Blog</h1>
            <div class="post-line"></div>
        </div>

        <PageTitle>Marina Sundström</PageTitle>

        @if(posts is null) 
        {
            <text>Loading posts</text>
        }
        else 
        {
            <PageTitle>Blog - Marina Sundström</PageTitle>

            <ol>
                @foreach (var post in posts)
                {
                    <li>
                        <div class="pt-2 mb-5">
                            <a href="/blog/@post.Slug"><h1>@post.Title</h1></a>
                            @if(post.Subtitle is not null) 
                            {
                                <h2 class="post-subtitle">@post.Subtitle</h2>
                            } 
                        <div class="post-line"></div>

                        <div class="post-info">
                            <div class="d-flex justify-content-between">
                                <span class="mb-2">
                                    @if(post.Author is not null) 
                                    {
                                        @post.Author <text> • </text>
                                    }
                                    <time
                                        datetime="@post.Published.ToString("yyyy-MM-dd")">@post.Published.ToString("dddd, dd MMMM")</time>
                                    @if(post.EstimatedReadTime is not null) 
                                    {
                                        <text> • </text> <ReadTimeEstimateDiplay EstimatedTime="@post.EstimatedReadTime.GetValueOrDefault()" />
                                    }
                                </span>
                                <div>
                                    <CommentCount Url="@($"{NavigationManager.Uri}/{post.Title}")" />
                                </div>
                            </div>
                            <div class="mt-2">
                                @if(post.Tags is not null) 
                                {
                                    @foreach (var tag in post.Tags)
                                    {
                                    <a class="badge rounded-pill bg-secondary me-1 mb-1 text-decoration-none" href="/blog/tags/@Uri.EscapeDataString(tag)">
                                        @tag
                                    </a>                                    
                                    }
                                }
                            </div>
                        </div>

                        <div class="text-content">
                        <MarkdownView Content="@post.Excerpt" Truncate="true" />

                        </div>

                        </div>
                        <hr />
                    </li>   
                }
            </ol>

            <Pagination Page="@Page.GetValueOrDefault()" PageCount="@totalPages" PageChanged="OnPageChanged" Href="/blog" />
        }
    </div>

    <div class="col-md-3">
        <h3>Tags</h3>
        <Tags></Tags>
    </div>
</div>

@code {
    IEnumerable<PostInfo>? posts;
    int totalPages = 0;

    [Parameter]
    [SupplyParameterFromQuery] 
    public int? Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();

        StateHasChanged();
    }

    async Task OnPageChanged(int page) 
    {
        /*
        Page = page;
        await LoadData();

        StateHasChanged();
        */
    }

    private async Task LoadData() 
    {
        if(Page is null) Page = 1;
        
        var response = await Http.GetAsync($"/posts/_index-{Page}.json");

        response.EnsureSuccessStatusCode();

        var str = await response.Content.ReadAsStringAsync();
        
        var index = System.Text.Json.JsonSerializer.Deserialize<IndexPage>(str);
        posts = index.Posts;
        totalPages = index.TotalPages;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    record IndexPage(IEnumerable<PostInfo> Posts, int Page, int TotalPages);

    record PostInfo(string Title, string? Subtitle, string Slug, string Author, string? Image, DateTime Published, TimeSpan? EstimatedReadTime, string Excerpt, string[] Tags);
}