@page "/blog/{*slug}"
@page "/{*slug}"
@implements IDisposable
@using Models
@using PersonalSite.Disqus
@using PersonalSite.Markdown
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Marina Sundström</PageTitle>

@if (notFound)
{
    <div class="col-12 col-xl-8 mx-auto p-3 py-md-5">
    <NotFound />
</div>
}
else
{
    @if (loadingError && exception is not null)
    {
        <div class="col-12 col-xl-8 mx-auto p-3 py-md-5">
            <h1>@exception.GetType().Name</h1>

            <p>@exception.Message</p>

            <code>
                @exception.StackTrace
            </code>
        </div>
    }

    @if (post is not null)
    {
        <PageTitle>@post.Title - Marina Sundström</PageTitle>

        <div class="post">
    @if (post.Image is not null)
            {
                <section class="mast-head" style="background-image: url('@post.Image');">
                    <Header Title="@post.Title" Subtitle="@post.Subtitle" Author="@post.Author" Published="@post.Published"
                        Tags="@post.Tags" HasPadding="true" EstimatedTime="@(TimeSpan.FromMinutes(1))" ShowEstimatedTime="isBlog" ShowCommentCount="isBlog">

                    </Header>
                </section>
            }
            else
            {
                <div class="pt-4">
                    <Header Title="@post.Title" Subtitle="@post.Subtitle" Author="@post.Author" Published="@post.Published"
                        Tags="@post.Tags" HasPadding="false" EstimatedTime="@(TimeSpan.FromMinutes(1))" ShowEstimatedTime="isBlog" ShowCommentCount="isBlog">

                    </Header>
                </div>
            }

            <div class="col-12 col-xl-8 mx-auto p-2 py-4 py-md-5 row">
                <div class="text-content col-md-10">
                    <MarkdownView Content="@post.Content" />

                    @if(isBlog) 
                    {
                        <div style="margin-top: 42px;">
                            <DisqusThread />
                        </div>
                    }
                </div>

                <div class="col-md-2">
                    <div class="social mx-4">
                        <FacebookShareButton Url="@NavigationManager.Uri" />
                        <TwitterShareButton Url="@NavigationManager.Uri" Text="@($"{post.Title}")" Hashtags="@(post.Tags ?? new string[0])"></TwitterShareButton>
                        <LinkedInShareButton Url="@NavigationManager.Uri" Title="@($"{post.Title}")" Summary="Test" Source="Marina Sundström"></LinkedInShareButton>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    Post? post;
    private bool loadingError;
    private Exception? exception;
    private bool notFound;
    private bool isBlog;

    [Parameter]
    public string Slug { get; set; }

    [Parameter]
    public TimeSpan EstimatedTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        notFound = false;
        loadingError = false;

        try
        {
            string url = null!;

            isBlog = NavigationManager.Uri.ToLower().Contains("blog");

            if(isBlog)
            {
                url = $"/posts/{Slug}.md";
            }
            else 
            {
                url = $"/pages/{Slug}.md";
            }

            var response = await Http.GetAsync(url);

            response.EnsureSuccessStatusCode();

            var str = await response.Content.ReadAsStringAsync();

            var frontmatter = MarkdownExtensions.GetFrontMatter<BlogFrontMatter>(str);

            post = new Post()
            {
                Title = frontmatter.Title,
                Subtitle = frontmatter.Subtitle,
                Slug = "hello-word",
                Author = frontmatter.Author,
                Published = frontmatter.Published,
                Image = frontmatter.Image,
                Tags = frontmatter.Tags,
                Content = str
            };
        }
        catch (HttpRequestException exc)
        {
            if (exc.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                notFound = true;
            }
            else
            {
                loadingError = true;
                exception = exc;
                return;
            }
        }
        catch (Exception exc)
        {
            exception = exc;
            loadingError = true;
            return;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}